; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define i32 @main() {
.entry:
  %__1_k = alloca i32, align 4
  %x = alloca %array, align 8
  %0 = getelementptr %array, %array* %x, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %x, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  %5 = getelementptr %array, %array* %x, i32 0, i32 4
  store i32 1, i32* %5, align 4
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  store i32 1, i32* %8, align 4
  store i32 1, i32* %9, align 4
  store i32 5, i32* %10, align 4
  %11 = alloca i32, align 4
  store i32 5, i32* %11, align 4
  %12 = getelementptr %array, %array* %x, i32 0, i32 0
  %13 = load i32, i32* %11, align 4
  %14 = alloca i32, i32 %13, align 4
  store i32* %14, i32** %12, align 8
  %15 = alloca <5 x i32>, align 32
  %16 = getelementptr <5 x i32>, <5 x i32>* %15, i32 0, i32 0
  store i32 4, i32* %16, align 4
  %17 = getelementptr <5 x i32>, <5 x i32>* %15, i32 0, i32 1
  store i32 9, i32* %17, align 4
  %18 = getelementptr <5 x i32>, <5 x i32>* %15, i32 0, i32 2
  store i32 6, i32* %18, align 4
  %19 = getelementptr <5 x i32>, <5 x i32>* %15, i32 0, i32 3
  store i32 12, i32* %19, align 4
  %20 = getelementptr <5 x i32>, <5 x i32>* %15, i32 0, i32 4
  store i32 13, i32* %20, align 4
  %21 = getelementptr <5 x i32>, <5 x i32>* %15, i32 0, i32 0
  %22 = getelementptr %array, %array* %x, i32 0, i32 0
  store i32* %21, i32** %22, align 8
  store i32 0, i32* %__1_k, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %23 = load i32, i32* %__1_k, align 4
  %24 = add i32 %23, 1
  %25 = icmp sle i32 %24, 5
  br i1 %25, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %26 = load i32, i32* %__1_k, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* %__1_k, align 4
  %28 = load i32, i32* %__1_k, align 4
  %29 = getelementptr %array, %array* %x, i32 0, i32 2
  %30 = load %dimension_descriptor*, %dimension_descriptor** %29, align 8
  %31 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %30, i32 0
  %32 = getelementptr %dimension_descriptor, %dimension_descriptor* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = sub i32 %28, %33
  %35 = mul i32 1, %34
  %36 = add i32 0, %35
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %31, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = mul i32 1, %38
  %40 = getelementptr %array, %array* %x, i32 0, i32 0
  %41 = load i32*, i32** %40, align 8
  %42 = getelementptr inbounds i32, i32* %41, i32 %36
  %43 = load i32, i32* %42, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
