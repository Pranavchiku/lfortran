; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\08\00", align 1
@5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define void @f_x_y(i32* %x, i32* %__1x, i32* %__2x, i32* %y, i32* %__1y, i32* %__2y) {
.entry:
  %__1_t = alloca i32, align 4
  %__1_v = alloca i32, align 4
  %0 = load i32, i32* %__1x, align 4
  store i32 %0, i32* %__1_v, align 4
  %1 = load i32, i32* %__1y, align 4
  %2 = sub i32 %1, 1
  store i32 %2, i32* %__1_t, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %3 = load i32, i32* %__1_t, align 4
  %4 = add i32 %3, 1
  %5 = load i32, i32* %__2y, align 4
  %6 = load i32, i32* %__1y, align 4
  %7 = add i32 %5, %6
  %8 = sub i32 %7, 1
  %9 = icmp sle i32 %4, %8
  br i1 %9, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %10 = load i32, i32* %__1_t, align 4
  %11 = add i32 %10, 1
  store i32 %11, i32* %__1_t, align 4
  %12 = load i32, i32* %__1_t, align 4
  %13 = load i32, i32* %__1y, align 4
  %14 = load i32, i32* %__2y, align 4
  %15 = sub i32 %12, %13
  %16 = mul i32 1, %15
  %17 = add i32 0, %16
  %18 = mul i32 1, %14
  %19 = getelementptr inbounds i32, i32* %y, i32 %17
  %20 = load i32, i32* %__1_v, align 4
  %21 = load i32, i32* %__1x, align 4
  %22 = load i32, i32* %__2x, align 4
  %23 = sub i32 %20, %21
  %24 = mul i32 1, %23
  %25 = add i32 0, %24
  %26 = mul i32 1, %22
  %27 = getelementptr inbounds i32, i32* %x, i32 %25
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %19, align 4
  %29 = load i32, i32* %__1_v, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %__1_v, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %31 = load i32, i32* %__1y, align 4
  %32 = add i32 %31, 1
  store i32 %32, i32* %__1_t, align 4
  br label %return

return:                                           ; preds = %loop.end
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %array_bound23 = alloca i32, align 4
  %array_bound17 = alloca i32, align 4
  %array_bound12 = alloca i32, align 4
  %call_arg_value11 = alloca i32, align 4
  %call_arg_value10 = alloca i32, align 4
  %call_arg_value9 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %array_bound5 = alloca i32, align 4
  %array_bound1 = alloca i32, align 4
  %array_bound = alloca i32, align 4
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %__1_k = alloca i32, align 4
  %__1_t = alloca i32, align 4
  %x = alloca [3 x i32], align 4
  %y = alloca [3 x i32], align 4
  br i1 true, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %array_bound, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load i32, i32* %array_bound, align 4
  %3 = sub i32 %2, 1
  store i32 %3, i32* %__1_t, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %ifcont
  %4 = load i32, i32* %__1_t, align 4
  %5 = add i32 %4, 1
  br i1 true, label %then2, label %else3

then2:                                            ; preds = %loop.head
  store i32 3, i32* %array_bound1, align 4
  br label %ifcont4

else3:                                            ; preds = %loop.head
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %6 = load i32, i32* %array_bound1, align 4
  %7 = icmp sle i32 %5, %6
  br i1 %7, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont4
  %8 = load i32, i32* %__1_t, align 4
  %9 = add i32 %8, 1
  store i32 %9, i32* %__1_t, align 4
  %10 = load i32, i32* %__1_t, align 4
  %11 = sub i32 %10, 1
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = getelementptr [3 x i32], [3 x i32]* %x, i32 0, i32 %13
  store i32 3, i32* %14, align 4
  br label %loop.head

loop.end:                                         ; preds = %ifcont4
  br i1 true, label %then6, label %else7

then6:                                            ; preds = %loop.end
  store i32 1, i32* %array_bound5, align 4
  br label %ifcont8

else7:                                            ; preds = %loop.end
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  %15 = load i32, i32* %array_bound5, align 4
  %16 = add i32 %15, 1
  store i32 %16, i32* %__1_t, align 4
  %17 = getelementptr [3 x i32], [3 x i32]* %x, i32 0, i32 0
  store i32 1, i32* %call_arg_value, align 4
  store i32 3, i32* %call_arg_value9, align 4
  %18 = getelementptr [3 x i32], [3 x i32]* %y, i32 0, i32 0
  store i32 1, i32* %call_arg_value10, align 4
  store i32 3, i32* %call_arg_value11, align 4
  call void @f_x_y(i32* %17, i32* %call_arg_value, i32* %call_arg_value9, i32* %18, i32* %call_arg_value10, i32* %call_arg_value11)
  br i1 true, label %then13, label %else14

then13:                                           ; preds = %ifcont8
  store i32 1, i32* %array_bound12, align 4
  br label %ifcont15

else14:                                           ; preds = %ifcont8
  br label %ifcont15

ifcont15:                                         ; preds = %else14, %then13
  %19 = load i32, i32* %array_bound12, align 4
  %20 = sub i32 %19, 1
  store i32 %20, i32* %__1_k, align 4
  br label %loop.head16

loop.head16:                                      ; preds = %loop.body21, %ifcont15
  %21 = load i32, i32* %__1_k, align 4
  %22 = add i32 %21, 1
  br i1 true, label %then18, label %else19

then18:                                           ; preds = %loop.head16
  store i32 3, i32* %array_bound17, align 4
  br label %ifcont20

else19:                                           ; preds = %loop.head16
  br label %ifcont20

ifcont20:                                         ; preds = %else19, %then18
  %23 = load i32, i32* %array_bound17, align 4
  %24 = icmp sle i32 %22, %23
  br i1 %24, label %loop.body21, label %loop.end22

loop.body21:                                      ; preds = %ifcont20
  %25 = load i32, i32* %__1_k, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %__1_k, align 4
  %27 = load i32, i32* %__1_k, align 4
  %28 = sub i32 %27, 1
  %29 = mul i32 1, %28
  %30 = add i32 0, %29
  %31 = getelementptr [3 x i32], [3 x i32]* %y, i32 0, i32 %30
  %32 = load i32, i32* %31, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %32, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %loop.head16

loop.end22:                                       ; preds = %ifcont20
  br i1 true, label %then24, label %else25

then24:                                           ; preds = %loop.end22
  store i32 1, i32* %array_bound23, align 4
  br label %ifcont26

else25:                                           ; preds = %loop.end22
  br label %ifcont26

ifcont26:                                         ; preds = %else25, %then24
  %33 = load i32, i32* %array_bound23, align 4
  %34 = add i32 %33, 1
  store i32 %34, i32* %__1_k, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
