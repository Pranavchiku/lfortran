; ModuleID = 'LFortran'
source_filename = "LFortran"

%c_ptr = type { i32 }
%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }
%complex_4 = type { float, float }
%complex_8 = type { double, double }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [10 x i8] c"%23.17f%s\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [2 x i8] c" \00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [12 x i8] c"(%lf,%lf)%s\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32**, %array*)

define void @__module_lfortran_intrinsic_math_cpu_time(double* %t) {
.entry:
  call void @_lfortran_cpu_time(double* %t)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_cpu_time(double*)

define %complex_4 @__module_lfortran_intrinsic_math_ctan(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_ctan(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_ctan(<2 x float>)

define double @__module_lfortran_intrinsic_math_dabs(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fsub double 0.000000e+00, %3
  store double %4, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %r, align 8
  ret double %5
}

define void @__module_lfortran_intrinsic_math_dp_rand_num(double* %harvest) {
.entry:
  call void @_lfortran_dp_rand_num(double* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_dp_rand_num(double*)

define double @__module_lfortran_intrinsic_math_dtan(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dtan(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dtan(double)

define void @__module_lfortran_intrinsic_math_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max) {
.entry:
  call void @_lfortran_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i32sys_clock(i32*, i32*, i32*)

define void @__module_lfortran_intrinsic_math_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max) {
.entry:
  call void @_lfortran_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i64sys_clock(i64*, i64*, i64*)

define void @__module_lfortran_intrinsic_math_sp_rand_num(float* %harvest) {
.entry:
  call void @_lfortran_sp_rand_num(float* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_sp_rand_num(float*)

define i32 @main() {
.entry:
  %call_arg_value1 = alloca double, align 8
  %call_arg_value = alloca double, align 8
  %x = alloca double, align 8
  %z = alloca %complex_8, align 8
  store double 1.500000e+00, double* %x, align 8
  %0 = call double @__module_lfortran_intrinsic_math_dtan(double* %x)
  store double %0, double* %x, align 8
  %1 = load double, double* %x, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i32 0, i32 0), double %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %2 = load double, double* %x, align 8
  %3 = fsub double %2, 0x402C33ED50B88778
  store double %3, double* %call_arg_value, align 8
  %4 = call double @__module_lfortran_intrinsic_math_dabs(double* %call_arg_value)
  %5 = fcmp ugt double %4, 1.000000e-10
  br i1 %5, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %6 = alloca %complex_8, align 8
  %7 = getelementptr %complex_8, %complex_8* %6, i32 0, i32 0
  %8 = getelementptr %complex_8, %complex_8* %6, i32 0, i32 1
  store double 1.500000e+00, double* %7, align 8
  store double 3.500000e+00, double* %8, align 8
  %9 = load %complex_8, %complex_8* %6, align 8
  store %complex_8 %9, %complex_8* %z, align 8
  %10 = call %complex_4 @__module_lfortran_intrinsic_math_ctan(%complex_8* %z)
  %11 = alloca %complex_4, align 8
  store %complex_4 %10, %complex_4* %11, align 4
  %12 = getelementptr %complex_4, %complex_4* %11, i32 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = fpext float %13 to double
  %15 = alloca %complex_4, align 8
  store %complex_4 %10, %complex_4* %15, align 4
  %16 = getelementptr %complex_4, %complex_4* %15, i32 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = alloca %complex_8, align 8
  %20 = getelementptr %complex_8, %complex_8* %19, i32 0, i32 0
  %21 = getelementptr %complex_8, %complex_8* %19, i32 0, i32 1
  store double %14, double* %20, align 8
  store double %18, double* %21, align 8
  %22 = load %complex_8, %complex_8* %19, align 8
  store %complex_8 %22, %complex_8* %z, align 8
  %23 = load %complex_8, %complex_8* %z, align 8
  %24 = alloca %complex_8, align 8
  store %complex_8 %23, %complex_8* %24, align 8
  %25 = getelementptr %complex_8, %complex_8* %24, i32 0, i32 0
  %26 = load double, double* %25, align 8
  %27 = alloca %complex_8, align 8
  store %complex_8 %23, %complex_8* %27, align 8
  %28 = getelementptr %complex_8, %complex_8* %27, i32 0, i32 1
  %29 = load double, double* %28, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i32 0, i32 0), double %26, double %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  %30 = load %complex_8, %complex_8* %z, align 8
  %31 = alloca %complex_8, align 8
  store %complex_8 %30, %complex_8* %31, align 8
  %32 = getelementptr %complex_8, %complex_8* %31, i32 0, i32 0
  %33 = load double, double* %32, align 8
  %34 = fsub double %33, 0x3F30E5C06C0C177D
  store double %34, double* %call_arg_value1, align 8
  %35 = call double @__module_lfortran_intrinsic_math_dabs(double* %call_arg_value1)
  %36 = fcmp ugt double %35, 1.000000e-10
  br i1 %36, label %then2, label %else3

then2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)
